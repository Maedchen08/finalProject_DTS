// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/transaction_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "AntarJemput-Be-C/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionServiceInterface is a mock of TransactionServiceInterface interface.
type MockTransactionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceInterfaceMockRecorder
}

// MockTransactionServiceInterfaceMockRecorder is the mock recorder for MockTransactionServiceInterface.
type MockTransactionServiceInterfaceMockRecorder struct {
	mock *MockTransactionServiceInterface
}

// NewMockTransactionServiceInterface creates a new mock instance.
func NewMockTransactionServiceInterface(ctrl *gomock.Controller) *MockTransactionServiceInterface {
	mock := &MockTransactionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceInterface) EXPECT() *MockTransactionServiceInterfaceMockRecorder {
	return m.recorder
}

// ChangesConfirmed mocks base method.
func (m *MockTransactionServiceInterface) ChangesConfirmed(t *models.Transactions) (models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangesConfirmed", t)
	ret0, _ := ret[0].(models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangesConfirmed indicates an expected call of ChangesConfirmed.
func (mr *MockTransactionServiceInterfaceMockRecorder) ChangesConfirmed(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesConfirmed", reflect.TypeOf((*MockTransactionServiceInterface)(nil).ChangesConfirmed), t)
}

// ChangesDone mocks base method.
func (m *MockTransactionServiceInterface) ChangesDone(t *models.Transactions) (models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangesDone", t)
	ret0, _ := ret[0].(models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangesDone indicates an expected call of ChangesDone.
func (mr *MockTransactionServiceInterfaceMockRecorder) ChangesDone(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesDone", reflect.TypeOf((*MockTransactionServiceInterface)(nil).ChangesDone), t)
}

// ChangesRejected mocks base method.
func (m *MockTransactionServiceInterface) ChangesRejected(t *models.Transactions) (models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangesRejected", t)
	ret0, _ := ret[0].(models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangesRejected indicates an expected call of ChangesRejected.
func (mr *MockTransactionServiceInterfaceMockRecorder) ChangesRejected(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesRejected", reflect.TypeOf((*MockTransactionServiceInterface)(nil).ChangesRejected), t)
}

// DeleteTransaction mocks base method.
func (m *MockTransactionServiceInterface) DeleteTransaction(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockTransactionServiceInterfaceMockRecorder) DeleteTransaction(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockTransactionServiceInterface)(nil).DeleteTransaction), id)
}

// GetAll mocks base method.
func (m *MockTransactionServiceInterface) GetAll() ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTransactionServiceInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTransactionServiceInterface)(nil).GetAll))
}

// GetByAgentId mocks base method.
func (m *MockTransactionServiceInterface) GetByAgentId(id int) ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentId", id)
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentId indicates an expected call of GetByAgentId.
func (mr *MockTransactionServiceInterfaceMockRecorder) GetByAgentId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentId", reflect.TypeOf((*MockTransactionServiceInterface)(nil).GetByAgentId), id)
}

// GetByCustomerId mocks base method.
func (m *MockTransactionServiceInterface) GetByCustomerId(id int) ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCustomerId", id)
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomerId indicates an expected call of GetByCustomerId.
func (mr *MockTransactionServiceInterfaceMockRecorder) GetByCustomerId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomerId", reflect.TypeOf((*MockTransactionServiceInterface)(nil).GetByCustomerId), id)
}

// GetById mocks base method.
func (m *MockTransactionServiceInterface) GetById(id int) (models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTransactionServiceInterfaceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTransactionServiceInterface)(nil).GetById), id)
}

// RatingAgent mocks base method.
func (m *MockTransactionServiceInterface) RatingAgent(id int) (models.AgentRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatingAgent", id)
	ret0, _ := ret[0].(models.AgentRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatingAgent indicates an expected call of RatingAgent.
func (mr *MockTransactionServiceInterfaceMockRecorder) RatingAgent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatingAgent", reflect.TypeOf((*MockTransactionServiceInterface)(nil).RatingAgent), id)
}

// RatingTransaction mocks base method.
func (m *MockTransactionServiceInterface) RatingTransaction(t *models.Transactions) (models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatingTransaction", t)
	ret0, _ := ret[0].(models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatingTransaction indicates an expected call of RatingTransaction.
func (mr *MockTransactionServiceInterfaceMockRecorder) RatingTransaction(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatingTransaction", reflect.TypeOf((*MockTransactionServiceInterface)(nil).RatingTransaction), t)
}

// Save mocks base method.
func (m *MockTransactionServiceInterface) Save(t *models.Transactions) (*models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", t)
	ret0, _ := ret[0].(*models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockTransactionServiceInterfaceMockRecorder) Save(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionServiceInterface)(nil).Save), t)
}
