// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories/transaction_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "AntarJemput-Be-C/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepoInterface is a mock of TransactionRepoInterface interface.
type MockTransactionRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoInterfaceMockRecorder
}

// MockTransactionRepoInterfaceMockRecorder is the mock recorder for MockTransactionRepoInterface.
type MockTransactionRepoInterfaceMockRecorder struct {
	mock *MockTransactionRepoInterface
}

// NewMockTransactionRepoInterface creates a new mock instance.
func NewMockTransactionRepoInterface(ctrl *gomock.Controller) *MockTransactionRepoInterface {
	mock := &MockTransactionRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepoInterface) EXPECT() *MockTransactionRepoInterfaceMockRecorder {
	return m.recorder
}

// ChangeConfirmed mocks base method.
func (m *MockTransactionRepoInterface) ChangeConfirmed(transaction *models.Transactions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeConfirmed", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeConfirmed indicates an expected call of ChangeConfirmed.
func (mr *MockTransactionRepoInterfaceMockRecorder) ChangeConfirmed(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeConfirmed", reflect.TypeOf((*MockTransactionRepoInterface)(nil).ChangeConfirmed), transaction)
}

// ChangeDone mocks base method.
func (m *MockTransactionRepoInterface) ChangeDone(transaction *models.Transactions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDone", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeDone indicates an expected call of ChangeDone.
func (mr *MockTransactionRepoInterfaceMockRecorder) ChangeDone(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDone", reflect.TypeOf((*MockTransactionRepoInterface)(nil).ChangeDone), transaction)
}

// ChangeReject mocks base method.
func (m *MockTransactionRepoInterface) ChangeReject(transaction *models.Transactions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeReject", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeReject indicates an expected call of ChangeReject.
func (mr *MockTransactionRepoInterfaceMockRecorder) ChangeReject(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeReject", reflect.TypeOf((*MockTransactionRepoInterface)(nil).ChangeReject), transaction)
}

// DeleteTransaction mocks base method.
func (m *MockTransactionRepoInterface) DeleteTransaction(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockTransactionRepoInterfaceMockRecorder) DeleteTransaction(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockTransactionRepoInterface)(nil).DeleteTransaction), id)
}

// GetAll mocks base method.
func (m *MockTransactionRepoInterface) GetAll() ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTransactionRepoInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTransactionRepoInterface)(nil).GetAll))
}

// GetByAgentId mocks base method.
func (m *MockTransactionRepoInterface) GetByAgentId(id int) ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentId", id)
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentId indicates an expected call of GetByAgentId.
func (mr *MockTransactionRepoInterfaceMockRecorder) GetByAgentId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentId", reflect.TypeOf((*MockTransactionRepoInterface)(nil).GetByAgentId), id)
}

// GetByCustomerId mocks base method.
func (m *MockTransactionRepoInterface) GetByCustomerId(id int) ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCustomerId", id)
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomerId indicates an expected call of GetByCustomerId.
func (mr *MockTransactionRepoInterfaceMockRecorder) GetByCustomerId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomerId", reflect.TypeOf((*MockTransactionRepoInterface)(nil).GetByCustomerId), id)
}

// GetById mocks base method.
func (m *MockTransactionRepoInterface) GetById(id int) (models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTransactionRepoInterfaceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTransactionRepoInterface)(nil).GetById), id)
}

// RatingAgent mocks base method.
func (m *MockTransactionRepoInterface) RatingAgent(id int) (models.AgentRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatingAgent", id)
	ret0, _ := ret[0].(models.AgentRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatingAgent indicates an expected call of RatingAgent.
func (mr *MockTransactionRepoInterfaceMockRecorder) RatingAgent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatingAgent", reflect.TypeOf((*MockTransactionRepoInterface)(nil).RatingAgent), id)
}

// RatingTransaction mocks base method.
func (m *MockTransactionRepoInterface) RatingTransaction(transaction *models.Transactions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatingTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// RatingTransaction indicates an expected call of RatingTransaction.
func (mr *MockTransactionRepoInterfaceMockRecorder) RatingTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatingTransaction", reflect.TypeOf((*MockTransactionRepoInterface)(nil).RatingTransaction), transaction)
}

// Save mocks base method.
func (m *MockTransactionRepoInterface) Save(transaction *models.Transactions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", transaction)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockTransactionRepoInterfaceMockRecorder) Save(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionRepoInterface)(nil).Save), transaction)
}
