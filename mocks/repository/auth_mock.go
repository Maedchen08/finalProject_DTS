// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories/authrepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "AntarJemput-Be-C/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepoInterface is a mock of AuthRepoInterface interface.
type MockAuthRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoInterfaceMockRecorder
}

// MockAuthRepoInterfaceMockRecorder is the mock recorder for MockAuthRepoInterface.
type MockAuthRepoInterfaceMockRecorder struct {
	mock *MockAuthRepoInterface
}

// NewMockAuthRepoInterface creates a new mock instance.
func NewMockAuthRepoInterface(ctrl *gomock.Controller) *MockAuthRepoInterface {
	mock := &MockAuthRepoInterface{ctrl: ctrl}
	mock.recorder = &MockAuthRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepoInterface) EXPECT() *MockAuthRepoInterfaceMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockAuthRepoInterface) GetUser() ([]models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].([]models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthRepoInterfaceMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthRepoInterface)(nil).GetUser))
}

// GetUserId mocks base method.
func (m *MockAuthRepoInterface) GetUserId(id int) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", id)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockAuthRepoInterfaceMockRecorder) GetUserId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockAuthRepoInterface)(nil).GetUserId), id)
}

// Login mocks base method.
func (m *MockAuthRepoInterface) Login(username, password string) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthRepoInterfaceMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthRepoInterface)(nil).Login), username, password)
}

// Register mocks base method.
func (m *MockAuthRepoInterface) Register(users *models.Users) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", users)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthRepoInterfaceMockRecorder) Register(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthRepoInterface)(nil).Register), users)
}
